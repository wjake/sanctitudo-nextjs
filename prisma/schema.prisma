// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  discord       String
  name          String
  nickname      String?
  email         String? //@unique
  emailVerified DateTime?
  image         String?
  lodestone     String?
  role          Role
  bio           String?
  accounts      Account[]
  sessions      Session[]
  articles      Article[]
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  CONDITOR
  PRAEFECTUS
  ARTIFEX
  SOCIUS
  NONE
}

model Permission {
  id    String @id @default(cuid())
  label String @unique
  role  Role
}

model Article {
  id         String    @id @default(cuid())
  title      String    @db.Text
  body       String    @db.Text
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  comments   Comment[]
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?
}

model Comment {
  id         String   @id @default(cuid())
  body       String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  article    Article? @relation(fields: [articleId], references: [id])
  articleId  String?
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
}
